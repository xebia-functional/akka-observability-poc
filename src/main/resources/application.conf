server {
    system-name = "nclh-akka-service"
    request-timeout = 600
    port = 9100
    port = ${?SERVER_PORT}
    interface ="0.0.0.0"
    interface = ${?SERVER_INTERFACE}
    router = app.support.MainRouter
}

cinnamon.application = ${server.system-name}
include "cinnamon.conf"

bootstrapServers = "localhost:9092"

akka {

    loglevel = DEBUG
    log-dead-letters = 10
    log-dead-letters-during-shutdown = on
    log-config-on-start = off

    loggers = ["akka.event.slf4j.Slf4jLogger"]
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]

    actor{
        provider = cluster
        serialization-bindings {
            "com.xebia.useractorpoc.CborSerializable" = jackson-cbor
        }
        # allow-java-serialization = on
        debug {
            receive = off
            autoreceive = off
            lifecycle = off
            unhandled = off
            fsm = off
            event-stream = off
        }
    }

    cluster {
        seed-nodes = [
            "akka://Sharding@127.0.0.1:2551",
            "akka://Sharding@127.0.0.1:2552",
        ]
        downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
     }

    persistence {
        journal.plugin = "akka.persistence.journal.inmem"
        snapshot-store.plugin = "akka.persistence.snapshot-store.local"
        snapshot-store.local.dir = "target/snapshot"
    }

    kafka.producer {
        discovery-method = akka.discovery
        service-name = ""
        resolve-timeout = 3 seconds
        parallelism = 10000
        close-timeout = 60s
        close-on-producer-stop = true
        use-dispatcher = "akka.kafka.default-dispatcher"
        eos-commit-interval = 100ms
        kafka-clients {
        }
    }

    kafka.consumer {
    }

    http {
        server.request-timeout = 600 s
        client.parsing.max-content-length = 20m
        parsing.max-chunk-size = 20m
        host-connection-pool {
            max-connections = 128
            max-open-requests = 32768
        }
    }
    io.dns.inet-address.positive-ttl = 30s
}

cms {
    host = "http://localhost"
    host = ${?CMS_HOST}
    timeout = 20s
    cache { enabled = true, namespace = "cms", refresh = 1m, expire = 5m}
    circuit-breaker { max-failures = 200, call-timeout = 60s, reset-timeout = 10s }
}

tools {
    branch.file = "branch"
    revision.file = "revision"
    version.file = "version"
    defaultErrorMessage = "RIP"
    custom-dashboard = app.support.DashboardInfo
}

health-check-path {
    local = "conf/healthCheck"
    local = ${?HEALTH_CHECK_PATH_LOCAL}
    global = "/opt/healthCheck"
    global = ${?HEALTH_CHECK_PATH_GLOBAL}
}
